//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;

public class Activités
{

    private int idActivité;
    private DateTime heureDebut;
    private string texteDescriptif;
    private string typeActivite;
    private DateTime heureFin;
    private string statutActivite;
    private List<Astronautes> listeAstronautes = new List<Astronautes>();
    //Constructeur par défaut
	public Activités(string nom, DateTime hDebut, DateTime hFin)
    {
        nbActivité++;
        nomActivité = nom;
        idActivité = nbActivité;
        heureDebut = hDebut;
        heureFin = hFin;
    }



    private static int nbActivité = 0;
    protected string nomActivité;

    //Accesseurs//
    public string GetNomActivité
    {
        get { return nomActivité; }
        set { nomActivité = value; }
    }
<<<<<<< HEAD

    public string conversionDateMars(DateTime tempDateDebutPlanning)
    {
        DateTime dateDebutPlanning = tempDateDebutPlanning;

        int tempsMinuteDebutPlanning = dateDebutPlanning.Day * 60 * 24 + dateDebutPlanning.Hour * 60 + dateDebutPlanning.Minute;
        int tempsMinuteDebutActivite = heureDebut.Day * 60 * 24 + heureDebut.Hour * 60 + heureDebut.Minute + heureDebut.Day * 40;

        int intervalleTempsDebutActivite = tempsMinuteDebutActivite - tempsMinuteDebutPlanning;

        double doubleIntervalleTempsDebutActivite = intervalleTempsDebutActivite - heureDebut.Day * 60 * 24;

        int horaireDebutHeure = (int)Math.Truncate(doubleIntervalleTempsDebutActivite / 60);
        int horaireDebutMinute = doubleIntervalleTempsDebutActivite - horaireDebutHeure * 60;

    }


=======
>>>>>>> origin/master
	public DateTime getHeureDebut
	{
		get { return heureDebut; }
		set { heureDebut = value; }
	}

	public DateTime GetheureFin
	{
		get{return heureFin;}
		set{heureFin=value;}
	}

	public string GettexteDescriptif
	{
		get{return texteDescriptif;}
		set{texteDescriptif=value;}
	}

	public string GettypeActivite
	{
		get{return typeActivite;}
		set{typeActivite=value;}
	}

	public string GetstatutActivite
	{
		get{return statutActivite; }
		set{statutActivite =value;}
	}

	public virtual List<Astronautes> GetlisteAstronautes
	{
        get { return listeAstronautes; }
        set { listeAstronautes = value; }
	}

    //FinAccesseurs

	public virtual void RenvoieActiviteParMotCle()
	{
		throw new System.NotImplementedException();
	}

	public virtual void ajouterLieu()
	{
		throw new System.NotImplementedException();
	}

	public virtual void supprimerLieu()
	{
		throw new System.NotImplementedException();
	}

	public virtual void ajouterAstronautes()
	{
		throw new System.NotImplementedException();
	}

	public virtual void supprimerAstronautes()
	{
		throw new System.NotImplementedException();
	}

	public virtual void getListeAstronautes()
	{
		throw new System.NotImplementedException();
	}

	public virtual void getLieu()
	{
		throw new System.NotImplementedException();
	}


    
public void enregistrerActivites() // Permet d'enregistrer tous les attributs de toutes les classes de tout le projet
{   
     XmlDocument xmlDoc = new XmlDocument ();
	 XmlNode rootNode = xmlDoc.CreateElement("Activités");
	 xmlDoc.AppendChild (rootNode);


	 ////////////Activités//////////// Serialise les attributs de la classe Activités
	 XmlNode Activites=xmlDoc.CreateElement("Activites");
	 rootNode.AppendChild (Activites);

	 XmlNode hDebut= xmlDoc.CreateElement ("heureDebut");
	 hDebut.InnerText = getHeureDebut.ToString();
	 Activites.AppendChild(hDebut);

	 XmlNode hFin = xmlDoc.CreateElement("heureFin"); 
<<<<<<< HEAD

	 hFin.InnerText = GetheureFin.ToString();
	 Activites.AppendChild(hFin);

	 hFin.InnerText = GetheureFin.ToString();
	 Activites.AppendChild(hFin);

=======
	 hFin.InnerText = GetheureFin.ToString();
	 Activites.AppendChild(hFin);
	 hFin.InnerText = GetheureFin.ToString();
	 Activites.AppendChild(hFin);
>>>>>>> origin/master

	 XmlNode txtDescriptif = xmlDoc.CreateElement("texteDescriptif"); 
	 txtDescriptif.InnerText = GettexteDescriptif;
     Activites.AppendChild(txtDescriptif);

	 XmlNode typeActivity = xmlDoc.CreateElement("typeActivite"); 
	 typeActivity.InnerText = GettypeActivite;
	 Activites.AppendChild(typeActivity);

	 XmlNode statutDeActivite = xmlDoc.CreateElement("statutActivite"); 

	 statutDeActivite.InnerText = GetstatutActivite;
<<<<<<< HEAD

	 statutDeActivite.InnerText = GetstatutActivite;

=======
	 statutDeActivite.InnerText = GetstatutActivite;
>>>>>>> origin/master
	 Activites.AppendChild(statutDeActivite);
	////////////\Activites///////////

    ////////////Planning////////////

    ////////////\Planning///////////

 }
}

